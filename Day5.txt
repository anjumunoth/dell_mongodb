
1.Sunil: db.zipcode.find({state: "MA",city: { $regex: /^.{3}$/ }}).count()//1
2.
3.
--Phat
db.zipcode.find() 
var pred1={state: {$eq: 'MA'}}
var pred2={loc: {$gt: 40}}
db.zipcode.find({$and: [pred1, pred2]}).count() //474

var pred1={state: {$eq: 'MA'}}; // {state:"MA"}
var pred2={ $eq: [ { $strLenCP: "$city" }, 3 ] } ;//
db.zipcode.find({$and: [pred1, {$expr: pred2}] }).count() //1

var pred1={pop: {$lt: 5000}}
var pred2={state: {$in: ['MA','RI']}}
db.zipcode.find({$and: [pred1, pred2]}).count() //191
--







1)  Loraine - db.zipcode.find({state : "MA",loc : {$gt : 40}}); //474

2)  Loraine  -  db.zipcode.find({$and :[ {state : "MA"} ,{city : { $type : 2, $regex : /^.{0,3}$/}}]}); //1 

3) Loraine  - db.zipcode.find({$and:[{pop : {$lt : 5000 }},{state : {$in : ["MA" ,"RI"]}}]});  //191
2) Ashwaq  -- db.zipcode.find({state:"MA",city:/^.{3}$/}).count() //1


city -- exactly 3 characters
state - MA

javascript regex

mobile number 10 digit number

/[a-z]/ -- single char ;lower case alphabet
/[A-Z]/ -- single char; upper case char
/[0-9]/  - single digit number
/[0-9]{10}/ -- number can repeat 10 times

/g.d/ -- pattern which has g, then any character and then d

3 wild card characters : ? ,*, +
? --o or 1 character
/g?d/; //gd; god; // will not match -- good 

* 0 or more times of the preceeding character
/go*d/
Match : gd, god, good ,gooooood,  goods
Not Match :"goad"

+ 1 or more times of the preceeding character
/go+d/
Match: god; good; goooood, goods
Not match : "gd","goad"

Pattern which has exactly 3 chars
/^.{3}$/

Match: goods

ls | grep
output of ls, becomes the input for grep

Aggregation pipeline:
--Consist of multiple stages
-- Output of a particular stage becomes the input for the next stage
-- At each stage -- working/transforming the docs;
	-- Reduce/Increase the docs
  -- Reduce/Increase the fields

db.collectionName.aggregate([
{},
{},
{}
])

select sum(salary) from emp where loc="India" group by department having count(*) >10
1.From emp
2. where loc =India;// number of docs may get reduced
3. group by department; // grouping ; transforming the records into groups
4. having count(*) >10;//filter condition; number of groups may get reduced
5. project sum(salary);;// reducing the number of columns


select sum(pop) as "SumOfPop" from zipcode where pop > 1000 group by state ;

db.zipcode.aggregate(
	[
  	{
    	$match: 
      	{pop :{$gt:1000}}
    },
    {
    	$group:
      	{
        	_id:"$state",
          "SumOfPop": {$sum: "$pop"}
        }
    },
    {
    	$project:
      	{
        	"SumOfPop":1,
          _id:0,
          "state":"$_id"
        }
    },
    {
    	$count: "NumberOfDocs"
    }
  ]
)


db.zipcode.aggregate(
[{
 $match: {
  pop: {
   $gt: 1000
  }
 }
}, {
 $group: {
  _id: '$state',
  SumOfPopulation: {
   $sum: '$pop'
  }
 }
}, {
 $project: {
  SumOfPopulation: 1,
  _id: 0,
  stateName: '$_id'
 }
}, {
 $count: 'TotalNumberOfDocs'
}]
)

Match stage
	--Smatch
  -- Filter the docs 
  -- Cant filter the fields
  -- Expecting a filter document
  -- First param of find();
  Can i add multiple match stages in the same pipeline -- Yes
  
  
  
1. Pop >5000;// 11176
[{
 $match: {
  pop: {
   $gt: 5000
  }
 }
}]

2. state="MA" and city ="AGAWAM";// 1
db.zipcode.aggregate([{
 $match: {
  state: 'MA',
  city: 'AGAWAM'
 }
}])

3. state="RI" and pop > 10000 and pop < 20000;  // 12
{$match:
	{
  	state:"RI",pop:{$gt:10000,$lt:20000}
  }
}



//phat 
var stage1={$match: {pop: {$gt: 5000} }}
var stage2={$count: "count"}
db.zipcode.aggregate([stage1,stage2]) //11176

var stage1={$match: {state: 'MA', city: 'AGAWAM'}}
var stage2={$count: "count"}
db.zipcode.aggregate([stage1,stage2]) //1 

var stage1={$match: {state: 'RI', pop: {$lt: 20000, $gt: 10000 }}}
var stage2={$count: "count"}
db.zipcode.aggregate([stage1,stage2]) // 12


Group stage:
-- Grouping of docs
-- Grouping on no columns,1 column, 2 columns
-- Aggregate functions -- Accumulator functions()
-- Always provide a name for the field where accumulated value has to be displayed
-- Expects a doc
	-- _id : field(s) on basis to do the grouping; null(entire docs whicg is input to the entire stage)
  -- Accumulator functions which u want to perform
  -- Output of the group stage : _id, Alias name fields

select sum(pop) from zipcode;
$group:
{
	_id: null,
  "SumOfAllDocsPop":{$sum:"$pop"}
}

When i will use a $ sign with a field name : Whenever a field name comes on the right hand side of an expr

select sum(pop) from zipcode group by state;
$group:
{
	_id: "$state",
  "SumOfAllDocsPopGroupedByState":{$sum:"$pop"}
}

select sum(pop) from zipcode group by state,city;
$group:
{
	_id: {f1:"$state",f2:"$city"},
  "SumOfAllDocsPopGroupedByStateAndCity":{$sum:"$pop"}
}

Perform all aggregation methods:
[{
 $group: {
  _id: {
   f1: '$state',
   f2: '$city'
  },
  SumOfPop: {
   $sum: '$pop'
  },
  MinPop: {
   $min: '$pop'
  },
  MaxPop: {
   $max: '$pop'
  },
  AvgPop: {
   $avg: '$pop'
  },
  CountOfDocsInEachGroup: {
   $count: {}
  },
  CountOfDocsInEachGroupWithSUM1: {
   $sum: 1
  }
 }
}, {
 $project: {
  _id: 0,
  SumOfPop: 1,
  state: '$_id.f1',
  city: '$_id.f2'
 }
}]

1. select sum(pop) from zipcode group by state having count(*) >10
2 stages:
$group
$match


[
  {
    $group:
      /**
       * _id: The id of the group.
       * fieldN: The first field name.
       */
      {
        _id: "$state",
        SumOfPopulation: {
          $sum: "$pop",
        },
        CountOfDocs: {
          $count: {},
        },
      },
  },
  {
    $match:
      /**
       * query: The query in MQL.
       */
      {
        CountOfDocs: {
          $gt: 10,
        },
      },
  },
  {
    $project:
      /**
       * specifications: The fields to
       *   include or exclude.
       */
      {
        CountOfDocs: 1,
        SumOfPopulation: 1,
        _id: 0,
        state: "$_id",
      },
  },
]

// phat
var stage1={$group: {_id: "$state",  sumOfPopulation: {$sum: "$pop"}, countOfDocs:{$sum:1}}}
var stage2={$match:{countOfDocs :{$gt:10}}}
var stage3={$project: {_id:0, state:"$_id", countOfDocs: 1} }
db.zipcode.aggregate([stage1, stage2, stage3]) 

$project:
-- Project the fields
-- Not filter the rows
-- Number of rows as part of input == Number of rows in output

$lookup
$unwind

[{
 $unwind: {
  path: '$grades',
  includeArrayIndex: 'pos',
  preserveNullAndEmptyArrays: true
 }
}, {
 $group: {
  _id: '$name',
  TotalScore: {
   $sum: '$grades.score'
  }
 }
}, {
 $project: {
  _id: 0,
  'Restaurant Name': '$_id',
  TotalScore: 1
 }
}]

CollStats stage:

[{
 $collStats: {
  storageStats: {}
 }
}]




















